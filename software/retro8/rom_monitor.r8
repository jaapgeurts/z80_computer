unit rom_monitor

constants {

    // TODO: export these as EQU
    CTC_A  = 0x00
  // SIO_AD = 0x40
    SIO_BD = 0x41
  //  SIO_AC = 0x42
    SIO_BC = 0x43

    SIO_AC = 0x80
    SIO_AD = 0x81

}

variables {
    buf : ubyte[255]
    bufp : ubyte[]
    t : ubyte;
}

extern {
}


function initTimer() {

/* Crystal is 3,686,400 MHz
  set up CTC  - 4800 baud is max achievable with 1MHz
  Time constants at 1MHz:
  26; time constant for 2400 baud, 0.16% error
  13; time constant for 4800 baud, 0.16% error
   baudrates - Time constant
   @3.686MHZ
  115200    - 2
  57600     - 4
  19200     - 12
  9600      - 24
*/
    #CTC_A := 0b00000101
    #CTC_A := 1
}

function initSerialCon() {
    // reset channel 0
    #SIO_AC := 0b00110000

    #SIO_AC := 0b00000100 // set clock rate, No parity, 1 stopbit
    #SIO_AC := 0b00000100 

    #SIO_AC := 0b00000011 // enable receiver (WR3)
    #SIO_AC := 0b11000001 // recv enable; 8bits / char

    #SIO_AC := 0b00000101 //
    #SIO_AC := 0b01101000 // send enable
}

function initSerialKbd() {
  #SIO_BC :=  0b00110000 //  reset channel 1

  #SIO_BC :=  0b00000100 // write to WR1. Next byte is for WR4
  #SIO_BC :=  0b00000101 //  set clock rate, odd parity, 1 stopbit

  #SIO_BC :=  0b00000011 // enable receive (WR3)
  #SIO_BC :=  0b11000001 //  recv enable; 8bits/char
}

function waitSerial(port : C!ubyte) {
    asm {
  ; wait for serial port to be free
  ld	a, 0b00000000 ; write to WR1. Next byte is RR0
  out	(c), a
wait_serial_again:
  in    a, (c)
  bit   2,a
  jr    z, wait_serial_again

    }
}


function putChar(port : C!ubyte,  c : D!ubyte) {
    asm {
        ; store cd
        push  bc
        push  de
    }
    if (port = SIO_AD) {
        waitSerial(SIO_AC); // make sure we can send
    } else  {
        waitSerial(SIO_BC)
    }
    asm {
        ; retrieve cd
        pop  de
        pop  bc
    }
    #port := c
}

function getChar() : A!ubyte {
    
    asm {
  ; check if character available
  ld   a, 0b00000000  ; write to WR1. Next byte is RR0
  out  (SIO_AC), a
  in   a,(SIO_AC)
  bit  0, a
  jr   nz,readchar    ; no char available
  ld   a,0            ; FIXME: should use word here since 0 is a valid character
  ret
readchar:
  in   a,(SIO_AD)     ; if yes, then read and return in a
  }
}


function readLine() {
    
    ch : H!ubyte
    c :  L!ubyte
    buffer : IX!ubyte[]
  
    buffer := buf
    buffer++ // skip string length
    c := 0

    loop {
        repeat {
            ch := getChar()
        } until ch != 0 // false

/*   asm {
            ; putchar
            push bc
            push de
            ld   a,h
            add  '0'
            ld   d,a
            ld   c,SIO_AD
            call putChar
            pop de
            pop bc
        }*/

        if (ch = '\r') {
           [buf] := c
           return
        }
        putChar(SIO_AD,ch)
        if ch = '\b' {
            putChar(SIO_AD,' ')
            putChar(SIO_AD,'\b')
        }
        else {
            [buffer] := ch
            buffer++
            c++

        }
    }
}

function printk(str : HL!ubyte[]) {
  c : B!ubyte

  c := [str]
  str++
  
  while c != 0 {
      waitSerial(SIO_AC)
      #SIO_AD := [str]
      str++
      c--
  }
/*
    asm {
  ; print kernel message to serial (uses pascal strings)
  push hl
  push bc
  ld   b,(hl)
printk_loop:
  ld   a,b
  cp   0
  jr   z,printk_loopend
  ld   c, SIO_AC
  call waitSerial
  inc  hl
  ld   a, (hl)
  out  (SIO_AD), a
  dec  b
  jr   printk_loop;
printk_loopend:
  pop  bc
  pop  hl
    } 
    */
}

function println(m : HL!ubyte[]) {
    printk(m)
    printk("\n\r")
}

function strcmp(s1 : HL!ubyte[], s2 : DE!ubyte[]) : A!bool {
    cnt : C!ubyte

    cnt := [s1]
    while cnt >= 0 {
        if [s1] != [s2] {
          return false
        }
        s1++
        s2++
        cnt--
    }
    return true
}

function main() {
    
    // Setup the timer
    initTimer()

    // Initialize the console serial port
    initSerialCon()

    // Show welcome messages
    println("Z80 ROM Monitor v0.1")
    println("Written in r8")
    println("(C) Jan-Feb 2021 Jaap Geurts")

    println("Init keyboard")
    // init the keyboard serial port
    initSerialKbd();

  

    loop {
        // show prompt
        printk("> ")
        readLine() // result in buf
        printk("\n\r")
        
        if strcmp(buf,"help") {
            printk("Commands: help, halt, load, dump, run\r\n")
        } elif strcmp(buf,"halt") {
            printk("System halted")
            asm { 
                ;test
                halt
                }
        } elif strcmp(buf,"load") {
        } elif strcmp(buf,"run") {
                asm { 
                    ;test
                    call 0x8000
                }
        } elif [buf] != 0 {
            printk("Unknown command: ")
            putChar(SIO_AD,'"')
            printk(buf);
            putChar(SIO_AD,'"')
            printk("\n\r")
        }
    }
}